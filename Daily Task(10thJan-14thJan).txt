10th January, 2022

Topic: Grafana and Prometheus

Video's Link-
	1)https://youtu.be/w-c3KYKQQfs
	2)https://youtu.be/oPumWaoNw5s
	
	1)https://youtu.be/cF2P9d7rBlg
	2)https://youtu.be/7gW5pSM6dlU
Learnings-
	Grafana
	Why do we need Continuous Monitoring?
		Better Network Visibility and Transparency
		Facilitates Rapid Responses
		Minimizes System Downtime
		Assists with Healthy Bussiness Performance
		
	What is Continuous Monitoring?
		Is is automated prosess by which one can observe and detect compliance issues and security threats during each phrase of
		the DevOps pipeline.
		
	What is Grafana(port 3000)?
		Grafana is a multi-platform open source analytics and interactive visualization web application. It provides:
			Charts
			Graphs
			Alerts
		Grafana is the open source analytics and monitoring tool.
		It can connect to almost all types of databases.
		Grafana allows to query, visualize, alert on and understand metrics no matter where they are stored.
		Create, explore, and share dashboards with your team and foster a data driven culture.
		
	Grafana Features-
		Visualize
			Grafana has a plethora of visualization options to help you understand your data, beautifully.
			
		Alerts
			Seamlessly define alerts where it makes sanse - while you're in the data.
			
		Unify
			Grafana supports dozens of databases, natively. Mix them together in the same Dashboard.
		
		Open Source
			Grafana's completely open source and backed by a vibrant community.
		
		Extend 	
			Discover hundreds of dashboards and plugins in the official library.
			
		Collaborate
			Bring everyone together, and share data and dashboards across teams.
		
		
	
	

Learnings-
	Prometheus
	What is Prometheus?
		Prometheus is a software application used for event monitoring and alerting.
		It records real time metrics in a time series database built using a HTTP pull node.
			OR
		Prometheus pulls metrics (key/value) and stores the data as time-series, allowing users to query data and alert in a real-time fashion. At given intervals, 
		Prometheus will hit targets to collect metrics, aggregate data, show data, or even alert if some thresholds are met—in spite of not having the most 
		beautiful GUI in the world.
		
	Why Prometheus?
		Records any purely numeric time series.
		Designed for Reliability
		It can monitor both:
			Machine- centric and Highly dynamic service-oriented architectures.
		
		Prometheus is Pull-Based tool
		
	Continuous Monitoring
		Application Exception
		Memory Usage
		Server CPU
		Storage Spikes
	Prometheus monitor targets
	
	
	Components of Prometheus
		*The server of Prometheus stores and scrapes metrics. It applies the persistence layer. This layer is the server's part and is not defined in the documentation 
		expressly. All the nodes of this server are autonomous and don't rely on the distributed storage.
		*The web UI permits us to chart, visualize, and access stored information. Prometheus facilitates its UI. Also, we can configure some other tools for visualization 
		such as Grafana, for accessing the server of Prometheus using Prometheus Query Language
		*Alertmanager transfers alert through client applications, such as Prometheus server. It contains advanced aspects for routing, grouping, and deduplicating alerts 
		and may route from other services such as OpsGenie and PagerDuty.
		
		Prometheus depends on pulling, or scraping, metrics through defined endpoints. It means that our application requires disclosing any endpoint where many metrics are 
		present and advise the server of Prometheus to scrape it.
		
	Prometheus contains four types of metrics-
		1)Gauge
		2)Counter
		3)Summary
		4)Histogram
	
		The two types of metrics are gauges and counters. These are the simplest types for understanding because it is easy to link it to any value. These types define how many 
		resources of a system our application is currently using and also how many of the events are processed.

		1)A counter can be defined as any cumulative metric that illustrates an individual increasing counter monotonically whose value may only reset or increase to zero over 
		a restart. Such as, we can apply a counter for representing the number of errors, tasks completed, and requests served.

		2)A gauge can be defined as any metric that illustrates an individual value that may go down and up arbitrarily. Gauges are used to measure the values typically or 
		latest memory usage.
		
		Prometheus provides its support for two types of complex metrics: Summaries and histograms. These metrics are used to track the observation's number and observed value's sum. 
		It makes time series within the database. Such as, they all make observed value's sum with the suffix, i.e., _sum.

		3)A histogram is used to sampling the counts and observations (things like response size or request durations usually) in the configuration buckets. Also, it facilitates z
		the sum of each observed value.
		
		4)A summary is used to sampling various observations (things such as response size or request durations usually). Also, it gives observation's total count and each observed 
		value's sum. It can calculate configurable quantities on any sliding time window
	
		An important difference among histograms and summaries is that histograms disclose counts of bucketed observation and the quantities calculation through the 
		histogram's buckets happens over the server-side with a function, i.e., histogram_quantile().
		
	Some other key points are as follows:
		*Apply gauges for times-series metrics, i.e., straightforward.
		*Apply counters for many things we know for increasing monotonically. For example, if we are counting time numbers something happens.
		*Apply histogram for measurements of latency using general buckets. For example, a single bucket for "over SLO" and another for "under SLO".	
		
		
		
		
		
		
		
		
		
11th and 12th January, 2022

Topic: Icinga and Hiera

Video's Link-
	1)https://youtu.be/EZ4X2Cpl68k
	2)https://youtu.be/mwsDYQgWX-c
	3)https://en.wikipedia.org/wiki/Icinga
	
	1)https://youtu.be/vz4SWAVHFR0
	2)https://youtu.be/PjCvziNDYPg
	3)https://youtu.be/4sqvvg-m2Cw

Learnings-
	Icinga
		*Icinga is an open-source computer system and network monitoring application.
		*It was originally created as a fork of the Nagios system monitoring application.
		*Icinga is attempting to get past perceived shortcomings in Nagios' development process, as well as adding new features such as a modern Web 2.0 style user interface, 
		additional database connectors (for MySQL, Oracle, and PostgreSQL), and a REST API that lets administrators integrate numerous extensions without complicated 
		modification of the Icinga core.

	Monitoring
		*Monitoring of network services (SMTP, POP3, HTTP, NNTP, ping, etc.)
		*Monitoring of host resources (CPU load, disk usage, etc.)
		*Monitoring of server components (switches, routers, temperature and humidity sensors, etc.)
		*Simple plug-in design that allows users to easily develop their own service checks
		*Parallelized service checks
		*Ability to define network host hierarchy using “parent” hosts, allowing detection of and distinction between hosts that are down and those that are unreachable
		*Ability to define event handlers to be run during service or host events for proactive problem resolution
	
	Notification
		*Notification of contact persons when service or host problems occur and get resolved (via email, pager, instant message,[17] or user-defined method)
		*Escalation of alerts to other users or communication channels

	Visualisation & Reporting
		*Two optional user interfaces (Icinga Classic UI and Icinga Web) for visualization of host and service status, network maps, reports, logs, etc.
		*Icinga Reporting module based on open source Jasper Reports for both Icinga Classic and Icinga Web user interfaces
		*Template based reports.
		
	Architecture
		Icinga Core
			The Icinga Core manages monitoring tasks, receiving check results from various plug-ins. It then communicates these results to the IDODB (Icinga Data Out Database) 
			through the IDOMOD (Icinga Data Out Module) interface and IDO2DB (Icinga Data Out to Database) service daemon over SSL encrypted TCP sockets. Though both come packaged 
			(also known as IDOUtils) with the Core; they are single standing components, which can be separated to distribute the data and processes across multiple servers for 
			distributed systems monitoring.

			The Icinga Classic user interface also comes packaged with Icinga Core and can be used as a substitute to the PHP-based, Icinga Web interface

		Icinga 2
			Icinga 2 manages monitoring tasks, running checks, sending alert notifications. The Icinga 2 features can be enabled on-demand, be it default features such as the 
			'checker' or 'notification' component, or external interfaces compatible with Icinga 1.x and its user interfaces, for example the IDO DB (Icinga Data Out Database). 
			Icinga 2 ships a built-in cluster stack secured by SSL x509 certificates attempting to make distributed monitoring setups more easy.
		
		Icinga's User Interface
			Icinga offers a web interface for users to view monitoring results and send commands to the Icinga Core, called Icinga Web (also referred to as New Web) is the project's 
			Agavi and PHP based, Web 2.0 inspired front end that uses Cronks (widgets) to offer drag-n-drop customized dashboards. Icinga Web is a standalone piece of software
		
		Icinga Data Out Database
			The Icinga Data Out Database (IDODB) is a storage point for historical monitoring data for add-ons or the Icinga Web interface to access. In contrast to its 
			predecessor Nagios, Icinga supports PostgreSQL and Oracle databases in addition to MySQL.
		
		Icinga Reporting
			The Icinga project offers an optional Icinga Reporting module. It can be integrated into both Icinga Classic and Icinga Web user interfaces. The module provides template-based
			reports that can be saved to a repository with varying access levels and automated report generation and distribution. Reports can also be viewed in both of Icinga's optional 
			user interfaces.
		
		
		

Learnings-
	Hiera
		Configuration software from Puppet labs.
		Seprates configuration code from functionality.
		Introduced in 2011.
		Evolved from a simple plugin.
		In now a part of core Puppet.
		
	Puppet without Hiera
		Puppet agent asks for the configuration settings.
		The master 'downloads' a configuration catalog to the agent.
						Facts
				|---------------------|
			master					Agent
				|					|
				|___________________|
					Configuration
						(Catalog)
	
	Puppet with Hiera
		Agent will send facts to the master.
		Master will determine the agent by the facts and push the configuration(catalog).
		Hiera has all the value pair configurations in a database.
		The configurations are stored in a YAML or JSON file.
							Facts
		Hiera		  |---------------------|
		|			master					Agent
		|_____________|	|					|
						|___________________|
							Configuration
								(Catalog)
	
	Pros:
		Sepration between data and code.
		Clandestine storage.
		Integrates with back-end datastores.
		Has conditional logic.
	Cons:
		Can be confusing.
		YAML is bad.
		Hard to debug.


13th January, 2022

Topic: Jenkins

Video's Link-
	1)https://youtu.be/p7-U1_E_j3w
	2)https://youtu.be/woMAXn4e8NA
	3)https://youtu.be/7KCS70sCoK0
	4)https://youtu.be/N-Iv4KIOvKY
	
Learnings-
	Jenkins
	What is Jenkins
		Jenkins is a CI/CD tool.
		Free and Open Source.
		Written in Java
	
		*Jenkins is an open-source project written in Java that runs on Windows, macOS, and other Unix like operating systems. It is free comunity supported and might be 
		your first choice tool for CI.
		*Jenkins automate the entire software development life cycle.
		*Jenkins was originally developed by Sun Microsystem in 2004 under the name hudson.
		*The project was later named Jenkins when Oracle bought Microsystems.
		*It can run on any major platform without any Compatibility issues.
		*Whenever developers write code, we integrate all that code of all developers at that point of time and we build, test and deliver/Deploy to the Client.
		This process is called CI/CD.
		*Jenkins helps us to achieve this 
		*Because of CI, now bugs will be reported fast and get rectified fast and the entire software development process fast.
		
	Workflow of Jenkins
		*We can attach git, Maven, Selenium and Artifactory plugins to jenkins.
		*Once developers puts code in github, jenkins pull that code & send to Maven for Build.
		*Once build is done, jenkins pull that code and send to Selenium for testing.
		*Once testing is done, then jenkins will pull that code and send to Artifactory(Archiving purpose) as per requirement and so on.
		*We can also deploy with jenkins
		
	Advantages of Jenkins
		*It has lots of plug-ins available.
		*You can write your own plug-ins.
		*You can use community Plugins.
		*Jenkins is not just a tool. It is a Framework i.e. You can do whatever you want all you need is plug-in.
		*We can attach slaves(nodes) to jenkins master. It instruct others(slaves) to do job. If slaves are not available, Jenkins itself does the job.
		*jenkins also behave as Crone Server Replacement i.e. Can do scheduled task.
		*It can create labels.
		
	Jenkins Configuration
		How to change Home Directory
			Step 1: Check your Jenkins Home ＞ Manage Jenkins ＞ Configure System
			Step 2 : Create a new folder
			Step 3 : Copy the data from old folder to new folder
			Step 4 : Create/Update env variable JENKINS_HOME
			Step 5 : Restart Jenkins

			jenkins.xml

			JENKINS_HOME

		How to setup Git on Jenkins
			Step 1 : Goto Manage Jenkins ＞ Manage Plugins
			Step 2 : Check if git is already installed in Installed tab
			Step 3 : Else goto Available tab and search for git
			Step 4 : Install Git
			Step 5 : Check git option is present in Job Configuration

	Create the first Job on Jenkins
		How to connect to Git Remote Repository in Jenkins (GitHub)
			Step 1 : Get the url of the remote repository
			Step 2 : Add the git credentials on Jenkins
			Step 3 : In the jobs configuration goto SCM and provide git repo url in git section
			Step 4 : Add the credentials
			Step 5 : Run job and check if the repository is cloned

		How to use Command Line in Jenkins CLI
		Faster, easier, integrate
			Step 1 : start Jenkins
			Step 2 : goto Manage Jenkins - Configure Global Security - enable security
			Step 3 : goto - http://localhost:8080/cli/
			Step 4 : download jerkins-cli jar. Place at any location.
			Step 5 : test the jenkins command line is working

			java -jar jenkins-cli.jar -s http://localhost:8080 /help --username ＜userName＞ --password ＜password＞

		How to create Users + Manage + Assign Roles
		How to create New Users
		How to configure users
		How to create new roles
		How to assign users to roles
		How to Control user access on projects
			Step 1 : Create new users
			Step 2 : Configure users
			Step 3 : Create and manage user roles Role Based Authorization Strategy Plugin - download - restart jenkins
			Step 4 : Manage Jenkins - Configure Global Security - Authorization - Role Based Strategy
			Step 5 : Create Roles and Assign roles to users
			Step 6 : Validate authorization and authentication are working properly

	Chain Jobs
		Build ＞ Deploy ＞ Test ＞ Release
		Jenkinsfile : Pipeline as a code

		Step 1 : Start Jenkins
		Step 2 : Install Pipeline Plugin
		Step 3 : Create a new job
		Step 4 : Create or get Jenkinsfile in Pipeline section
		Step 5 : Run and check the output

	Jenkins Pipeline 
		How to get jenkinsfile from Git SCM
			Step 1 : Create a new job or use existing job (type : Pipeline)
			Step 2 : Create a repository or GitHub
			Step 3 : Add Jenkinsfile in the repo
			Step 4 : Under Jenkins job ＞ Pipeline section ＞ Select Definition Pipeline script from SCM
			Step 5 : Add repo and jenkinsfile location in the job under Pipeline section
			Step 6 : Save & Run

	
	In Jenkinsfile 
		post expression
		conditions - when
		Environmental Variables
		
		
			what variables are available from Jenkins
			see at: /env-vars.html
		tools-
		parameters-